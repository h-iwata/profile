version: 2.1

orbs:
  ruby: circleci/ruby@2.1.4
  node: circleci/node@5.2.0

# Reusable commands
commands:
  setup-pnpm:
    description: "Setup pnpm package manager"
    steps:
      - run:
          name: Setup pnpm package manager
          command: |
            wget -qO- https://get.pnpm.io/install.sh | env SHELL=/bin/bash PNPM_VERSION=10.14.0 sh -
            echo 'export PNPM_HOME="${HOME}/.local/share/pnpm"' >> $BASH_ENV
            echo 'export PATH="$PNPM_HOME:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            pnpm config set store-dir .pnpm-store

  restore-pnpm-cache:
    description: "Restore pnpm cache"
    steps:
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}

  save-pnpm-cache:
    description: "Save pnpm cache"
    steps:
      - save_cache:
          name: Save pnpm Package Cache
          key: pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - .pnpm-store

  install-pnpm-deps:
    description: "Install Node dependencies with pnpm"
    steps:
      - restore-pnpm-cache
      - setup-pnpm
      - run:
          name: Install Node dependencies
          command: pnpm install --no-frozen-lockfile
      - save-pnpm-cache

  run-security-scan:
    description: "Run security audit"
    parameters:
      type:
        type: enum
        enum: ["ruby", "npm", "both"]
        default: "both"
    steps:
      - when:
          condition:
            or:
              - equal: [ruby, << parameters.type >>]
              - equal: [both, << parameters.type >>]
          steps:
            - run:
                name: Ruby security audit
                command: |
                  gem install bundler-audit
                  bundle audit update
                  bundle audit check
      - when:
          condition:
            or:
              - equal: [npm, << parameters.type >>]
              - equal: [both, << parameters.type >>]
          steps:
            - install-pnpm-deps
            - run:
                name: NPM security audit
                command: |
                  pnpm audit --json > npm-audit.json || true
                  VULN_COUNT=$(jq '[.metadata.vulnerabilities.moderate, .metadata.vulnerabilities.high, .metadata.vulnerabilities.critical] | add // 0' npm-audit.json)
                  jq '.metadata.vulnerabilities // {}' npm-audit.json
                  [ "$VULN_COUNT" -eq 0 ] && echo "✅ No vulnerabilities" || echo "⚠️  Found $VULN_COUNT vulnerabilities"
            - store_artifacts:
                path: npm-audit.json
                destination: security-reports

# Reusable executors
executors:
  jekyll-executor:
    docker:
      - image: cimg/ruby:3.4.5-node
    working_directory: ~/repo

  playwright-executor:
    docker:
      - image: mcr.microsoft.com/playwright:v1.54.2-jammy

jobs:
  lint-html-scss:
    executor: jekyll-executor
    steps:
      - checkout
      - install-pnpm-deps
      - run:
          name: Run SCSS linter
          command: pnpm run lint:scss
      - ruby/install-deps:
          bundler-version: '2.6.1'
      - run:
          name: Build Jekyll site
          command: bundle exec jekyll build
      - run:
          name: Run HTML linter
          command: pnpm run lint:html

  build-jekyll:
    executor: jekyll-executor
    steps:
      - checkout
      - ruby/install-deps:
          bundler-version: '2.6.1'
      - run:
          name: Jekyll build
          command: bundle exec jekyll build --verbose
      - run:
          name: Check build output
          command: |
            [ -d "_site" ] || { echo "Build failed: _site directory not found"; exit 1; }
            echo "Build successful! Site files:"
            ls -la _site/
      - persist_to_workspace:
          root: ~/repo
          paths:
            - _site

  playwright-test:
    executor: playwright-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install-pnpm-deps
      - run:
          name: Run Playwright tests
          command: |
            # Setup test server
            mkdir -p temp_serve/profile
            cp -r _site/* temp_serve/profile/
            pnpm add -D http-server
            npx http-server temp_serve -p 4000 &
            sleep 3
            export BASE_URL="http://localhost:4000/profile"
            pnpm test
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: playwright-report
          destination: playwright-report

  security-scan:
    executor: jekyll-executor
    steps:
      - checkout
      - run-security-scan:
          type: both

workflows:
  version: 2
  test-and-build:
    jobs:
      - lint-html-scss:
          filters:
            branches:
              ignore: gh-pages
      - build-jekyll:
          filters:
            branches:
              ignore: gh-pages
      - playwright-test:
          requires:
            - build-jekyll
          filters:
            branches:
              ignore: gh-pages
      - security-scan:
          filters:
            branches:
              ignore: gh-pages

  nightly-security-check:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - main
    jobs:
      - security-scan