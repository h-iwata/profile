# Cursor AI Rules for h-iwata Profile Project

## 言語設定
- このプロジェクトでは日本語でコミュニケーションを行ってください
- コメントは日本語で記述してください
- エラーメッセージや説明も日本語で提供してください

## プロジェクト概要
これはJekyllベースの開発者プロフィールサイトです。静的サイトジェネレーターを使用して、職歴、スキル、プロジェクトを紹介しています。

## 技術スタック
- Jekyll 4.4.1
- Ruby 3.4.5 (rbenv管理)
- Node.js v24.5.0
- pnpm (パッケージマネージャー)
- Sass/SCSS
- Liquid テンプレート

## コーディング規約

### HTML/Liquid
- インデントは2スペース
- 属性は必ずダブルクォートで囲む
- Liquidタグを使用する際は可読性を重視
- セマンティックHTMLを使用

### SCSS
- BEM命名規則を推奨
- ネストは最大3階層まで
- 変数は`_variables.scss`に定義
- ミックスインは`_mixins.scss`に定義
- モバイルファーストのレスポンシブデザイン

### JavaScript
- ES6+の構文を使用
- constを優先、必要な場合のみlet使用
- アロー関数を活用
- async/awaitを優先

## ファイル構造の理解
```
_data/          # YAMLデータファイル（職歴、プロジェクト）
_includes/      # 再利用可能なコンポーネント
_layouts/       # ページレイアウト
assets/css/     # SCSSファイル（モジュラー構造）
_site/          # ビルド出力（触らない）
```

## 開発ワークフロー

### 新機能追加時
1. 適切なディレクトリにファイルを作成
2. 既存のパターンに従って実装
3. `pnpm run lint`でコード品質チェック
4. `bundle exec jekyll serve`でローカル確認

### スタイル変更時
1. 適切なSCSSパーシャルファイルを編集
2. 変数やミックスインを活用
3. レスポンシブ対応を確認
4. ブラウザでの表示確認

### データ更新時
1. `_data/`内のYAMLファイルを編集
2. Liquidテンプレートで適切に表示されることを確認

## よく使うコマンド
```bash
# 開発サーバー起動
bundle exec jekyll serve --livereload

# リンティング
pnpm run lint

# SCSS自動修正
pnpm run lint:fix

# 本番ビルド
bundle exec jekyll build
```

## AIアシスタントへの指示
1. コードを生成する際は、既存のコードスタイルに合わせてください
2. 新しいコンポーネントは`_includes/`に作成してください
3. スタイルは適切なSCSSパーシャルに追加してください
4. 日本語でのコミュニケーションを心がけてください
5. 変更を加える前に、影響範囲を説明してください

## セキュリティ
- APIキーやトークンをコードに含めない
- 個人情報は`_config.yml`と`_data/`ファイルで管理
- 公開したくない情報は`.gitignore`に追加

## パフォーマンス
- 画像は適切に圧縮する
- 不要なJavaScriptライブラリは使用しない
- CSSは必要最小限に保つ
- 静的ファイルのキャッシュを活用

## デバッグのヒント
- Jekyll のビルドエラーは詳細なエラーメッセージを確認
- SCSS のコンパイルエラーは行番号を確認
- ブラウザの開発者ツールでレイアウト問題を調査
- `jekyll build --verbose`で詳細なビルドログを確認

## テスト自動生成

### テスト生成リクエスト時の対応
ユーザーが「テストを生成」「E2Eテストを書いて」などと言った場合：

1. `tests/specs/`ディレクトリの`.test.md`ファイルを確認
2. 関連する仕様があればそれを使用、なければユーザーの要求から理解
3. 以下のコマンドでテスト生成：

```bash
# 自然言語から生成
pnpm test:gen "テストしたい内容"

# 仕様ファイルから生成
pnpm test:gen --spec tests/specs/機能名.test.md
```

### Playwrightテストコード規約

```typescript
import { test, expect } from '@playwright/test';

// 日本語でdescribeブロックを記述
test.describe('機能名', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/');
  });

  // 日本語でテストケースを記述
  test('ユーザーが○○できることを確認', async ({ page }) => {
    // セレクタの優先順位：
    // 1. data-testid属性
    await expect(page.locator('[data-testid="element"]')).toBeVisible();
    
    // 2. Role属性
    await page.getByRole('button', { name: 'ボタン名' }).click();
    
    // 3. テキスト
    await expect(page.getByText('期待するテキスト')).toBeVisible();
  });
});
```

### テスト関連のディレクトリ構造
```
tests/
├── specs/            # 自然言語仕様
├── generated/        # AI生成テスト
├── manual/          # 手動作成テスト
├── pages/           # Page Objects
├── helpers/         # ヘルパー関数
└── fixtures/        # テストデータ
```

### よく使うテストコマンド
```bash
# テスト生成
pnpm test:gen "内容"

# テスト実行
pnpm test
pnpm test:ui          # UIモード
pnpm test:debug       # デバッグモード
pnpm test:headed      # ブラウザ表示

# 監視モード
pnpm test:watch       # 仕様変更を監視して自動生成
```